{"version":3,"sources":["App.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","input","setInput","react_default","a","createElement","dist_default","id","onChange","event","target","value","dangerouslySetInnerHTML","__html","marked","breaks","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"8OAIe,SAASA,IACtB,IAD4BC,EAkDFC,mBAjDT,urCADWC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAkDrBK,EAlDqBH,EAAA,GAkDdI,EAlDcJ,EAAA,GAuD5B,OACEK,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,MACAD,EAAAC,EAAAC,cAAA,YAAUE,GAAG,SAASC,SAPPC,IACjBP,EAASO,EAAMC,OAAOC,QAMwBA,MAAOV,IACnDE,EAAAC,EAAAC,cAAA,OACEE,GAAG,UACHK,wBAAyB,CAAEC,OAAQC,IAAOb,EAAO,CAAEc,QAAQ,QC5DnE,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACPjB,EAAAC,EAAAC,cAACF,EAAAC,EAAMiB,WAAP,KACElB,EAAAC,EAAAC,cAACV,EAAD,OAEFqB","file":"static/js/main.2dd23ad1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport ReactFCCtest from \"react-fcctest\";\nimport marked from \"marked\";\nimport \"./styles.css\";\nexport default function App() {\n  const initialText = `\n  # Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n  \nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n  \nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | ------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n\n  `;\n\n  const [input, setInput] = useState(initialText);\n  const updateText = event => {\n    setInput(event.target.value);\n  };\n\n  return (\n    <div>\n      <ReactFCCtest />\n      <textarea id=\"editor\" onChange={updateText} value={input} />\n      <div\n        id=\"preview\"\n        dangerouslySetInnerHTML={{ __html: marked(input, { breaks: true }) }}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}